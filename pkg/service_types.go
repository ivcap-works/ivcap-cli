// Code generated by goa v3.21.5, DO NOT EDIT.
//
// service HTTP client types
//
// Command:
// $ goa gen github.com/ivcap-works/ivcap-core/service/design

package client

// ServiceCreateRequestBody is the type of the "service" service
// "service-create" endpoint HTTP request body.
type ServiceCreateRequestBody struct {
	// type of controller used for this service
	ControllerSchema string `form:"controller-schema" json:"controller-schema" xml:"controller-schema"`
	// controller definition
	Controller any `form:"controller" json:"controller" xml:"controller"`
	// Reference to policy used
	Policy string `form:"policy" json:"policy" xml:"policy"`
	// ID
	ID string `form:"id" json:"id" xml:"id"`
	// Optional provider provided name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// More detailed description of the service
	Description string `form:"description" json:"description" xml:"description"`
	// Optional tags defined for service to help in categorising them
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	// Service parameter definitions
	Parameters []*ParameterDefT `form:"parameters" json:"parameters" xml:"parameters"`
}

// ServiceUpdateRequestBody is the type of the "service" service
// "service-update" endpoint HTTP request body.
type ServiceUpdateRequestBody struct {
	// type of controller used for this service
	ControllerSchema string `form:"controller-schema" json:"controller-schema" xml:"controller-schema"`
	// controller definition
	Controller any `form:"controller" json:"controller" xml:"controller"`
	// Reference to policy used
	Policy string `form:"policy" json:"policy" xml:"policy"`
	// ID
	ID string `form:"id" json:"id" xml:"id"`
	// Optional provider provided name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// More detailed description of the service
	Description string `form:"description" json:"description" xml:"description"`
	// Optional tags defined for service to help in categorising them
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	// Service parameter definitions
	Parameters []*ParameterDefT `form:"parameters" json:"parameters" xml:"parameters"`
}

// ServiceListResponseBody is the type of the "service" service "service-list"
// endpoint HTTP response body.
type ServiceListResponseBody struct {
	// Services
	Items []*ServiceListItemTResponseBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// Time at which this list was valid
	AtTime *string              `form:"at-time,omitempty" json:"at-time,omitempty" xml:"at-time,omitempty"`
	Links  []*LinkTResponseBody `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
}

// ServiceCreateResponseBody is the type of the "service" service
// "service-create" endpoint HTTP response body.
type ServiceCreateResponseBody struct {
	// Service status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// type of controller used for this service
	ControllerSchema *string `form:"controller-schema,omitempty" json:"controller-schema,omitempty" xml:"controller-schema,omitempty"`
	// controller definition
	Controller any `form:"controller,omitempty" json:"controller,omitempty" xml:"controller,omitempty"`
	// Reference to billable account
	Account *string `form:"account,omitempty" json:"account,omitempty" xml:"account,omitempty"`
	// Reference to policy used
	Policy *string `form:"policy,omitempty" json:"policy,omitempty" xml:"policy,omitempty"`
	// time this service has been available from
	ValidFrom *string `form:"valid-from,omitempty" json:"valid-from,omitempty" xml:"valid-from,omitempty"`
	// time this service has been available to
	ValidTo *string              `form:"valid-to,omitempty" json:"valid-to,omitempty" xml:"valid-to,omitempty"`
	Links   []*LinkTResponseBody `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	// ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Optional provider provided name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// More detailed description of the service
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Optional tags defined for service to help in categorising them
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	// Service parameter definitions
	Parameters []*ParameterDefTResponseBody `form:"parameters,omitempty" json:"parameters,omitempty" xml:"parameters,omitempty"`
}

// ServiceReadResponseBody is the type of the "service" service "service-read"
// endpoint HTTP response body.
type ServiceReadResponseBody struct {
	// Service status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// type of controller used for this service
	ControllerSchema *string `form:"controller-schema,omitempty" json:"controller-schema,omitempty" xml:"controller-schema,omitempty"`
	// controller definition
	Controller any `form:"controller,omitempty" json:"controller,omitempty" xml:"controller,omitempty"`
	// Reference to billable account
	Account *string `form:"account,omitempty" json:"account,omitempty" xml:"account,omitempty"`
	// Reference to policy used
	Policy *string `form:"policy,omitempty" json:"policy,omitempty" xml:"policy,omitempty"`
	// time this service has been available from
	ValidFrom *string `form:"valid-from,omitempty" json:"valid-from,omitempty" xml:"valid-from,omitempty"`
	// time this service has been available to
	ValidTo *string              `form:"valid-to,omitempty" json:"valid-to,omitempty" xml:"valid-to,omitempty"`
	Links   []*LinkTResponseBody `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	// ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Optional provider provided name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// More detailed description of the service
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Optional tags defined for service to help in categorising them
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	// Service parameter definitions
	Parameters []*ParameterDefTResponseBody `form:"parameters,omitempty" json:"parameters,omitempty" xml:"parameters,omitempty"`
}

// ServiceUpdateResponseBody is the type of the "service" service
// "service-update" endpoint HTTP response body.
type ServiceUpdateResponseBody struct {
	// Service status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// type of controller used for this service
	ControllerSchema *string `form:"controller-schema,omitempty" json:"controller-schema,omitempty" xml:"controller-schema,omitempty"`
	// controller definition
	Controller any `form:"controller,omitempty" json:"controller,omitempty" xml:"controller,omitempty"`
	// Reference to billable account
	Account *string `form:"account,omitempty" json:"account,omitempty" xml:"account,omitempty"`
	// Reference to policy used
	Policy *string `form:"policy,omitempty" json:"policy,omitempty" xml:"policy,omitempty"`
	// time this service has been available from
	ValidFrom *string `form:"valid-from,omitempty" json:"valid-from,omitempty" xml:"valid-from,omitempty"`
	// time this service has been available to
	ValidTo *string              `form:"valid-to,omitempty" json:"valid-to,omitempty" xml:"valid-to,omitempty"`
	Links   []*LinkTResponseBody `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	// ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Optional provider provided name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// More detailed description of the service
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Optional tags defined for service to help in categorising them
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	// Service parameter definitions
	Parameters []*ParameterDefTResponseBody `form:"parameters,omitempty" json:"parameters,omitempty" xml:"parameters,omitempty"`
}

// JobListResponseBody is the type of the "service" service "job-list" endpoint
// HTTP response body.
type JobListResponseBody struct {
	// Jobs
	Items []*JobListItemResponseBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// Time at which this list was valid
	AtTime *string              `form:"at-time,omitempty" json:"at-time,omitempty" xml:"at-time,omitempty"`
	Links  []*LinkTResponseBody `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
}

// JobReadResponseBody is the type of the "service" service "job-read" endpoint
// HTTP response body.
type JobReadResponseBody struct {
	// ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Job status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Optional customer provided name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Optional customer provided tags
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	// Reference to order
	Order *string `form:"order,omitempty" json:"order,omitempty" xml:"order,omitempty"`
	// Reference to service requested
	Service *string `form:"service,omitempty" json:"service,omitempty" xml:"service,omitempty"`
	// Mime type of request
	RequestContentType *string `form:"request-content-type,omitempty" json:"request-content-type,omitempty" xml:"request-content-type,omitempty"`
	// Request content
	RequestContent any `form:"request-content,omitempty" json:"request-content,omitempty" xml:"request-content,omitempty"`
	// Mime type of result
	ResultContentType *string `form:"result-content-type,omitempty" json:"result-content-type,omitempty" xml:"result-content-type,omitempty"`
	// Result content
	ResultContent any `form:"result-content,omitempty" json:"result-content,omitempty" xml:"result-content,omitempty"`
	// Result content URN
	ResultContentUrn *string                           `form:"result-content-urn,omitempty" json:"result-content-urn,omitempty" xml:"result-content-urn,omitempty"`
	Products         *PartialProductList2TResponseBody `form:"products,omitempty" json:"products,omitempty" xml:"products,omitempty"`
	// Additional error message id status is 'Error' or 'Failed'
	ErrorMessage *string `form:"error-message,omitempty" json:"error-message,omitempty" xml:"error-message,omitempty"`
	// Reference to billable account
	Account *string `form:"account,omitempty" json:"account,omitempty" xml:"account,omitempty"`
	// Reference to policy used
	Policy *string `form:"policy,omitempty" json:"policy,omitempty" xml:"policy,omitempty"`
	// DateTime job was submitted
	RequestedAt *string `form:"requested-at,omitempty" json:"requested-at,omitempty" xml:"requested-at,omitempty"`
	// DateTime job processing started
	StartedAt *string `form:"started-at,omitempty" json:"started-at,omitempty" xml:"started-at,omitempty"`
	// DateTime job processing finished
	FinishedAt *string              `form:"finished-at,omitempty" json:"finished-at,omitempty" xml:"finished-at,omitempty"`
	Links      []*LinkTResponseBody `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
}

// JobEventsResponseBody is the type of the "service" service "job-events"
// endpoint HTTP response body.
type JobEventsResponseBody struct {
	// Stream sequence ID. Used in Last-Event-Id
	SeqID *string `form:"SeqID,omitempty" json:"SeqID,omitempty" xml:"SeqID,omitempty"`
	// Event ID
	EventID *string `form:"eventID,omitempty" json:"eventID,omitempty" xml:"eventID,omitempty"`
	// Event type, usually a simpler verions of 'schema'
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Schema of 'data'
	Schema *string `form:"schema,omitempty" json:"schema,omitempty" xml:"schema,omitempty"`
	// Event source
	Source *string `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	// timestamp in ISO802
	Timestamp *string `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	// Content of event
	Data any `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// ServiceListBadRequestResponseBody is the type of the "service" service
// "service-list" endpoint HTTP response body for the "bad-request" error.
type ServiceListBadRequestResponseBody struct {
	// Information message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ServiceListInvalidParameterResponseBody is the type of the "service" service
// "service-list" endpoint HTTP response body for the "invalid-parameter" error.
type ServiceListInvalidParameterResponseBody struct {
	// message describing expected type or pattern.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// name of parameter.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// provided parameter value.
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// ServiceListInvalidScopesResponseBody is the type of the "service" service
// "service-list" endpoint HTTP response body for the "invalid-scopes" error.
type ServiceListInvalidScopesResponseBody struct {
	// ID of involved resource
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ServiceListNotImplementedResponseBody is the type of the "service" service
// "service-list" endpoint HTTP response body for the "not-implemented" error.
type ServiceListNotImplementedResponseBody struct {
	// Information message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ServiceCreateBadRequestResponseBody is the type of the "service" service
// "service-create" endpoint HTTP response body for the "bad-request" error.
type ServiceCreateBadRequestResponseBody struct {
	// Information message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ServiceCreateInvalidParameterResponseBody is the type of the "service"
// service "service-create" endpoint HTTP response body for the
// "invalid-parameter" error.
type ServiceCreateInvalidParameterResponseBody struct {
	// message describing expected type or pattern.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// name of parameter.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// provided parameter value.
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// ServiceCreateInvalidScopesResponseBody is the type of the "service" service
// "service-create" endpoint HTTP response body for the "invalid-scopes" error.
type ServiceCreateInvalidScopesResponseBody struct {
	// ID of involved resource
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ServiceCreateNotImplementedResponseBody is the type of the "service" service
// "service-create" endpoint HTTP response body for the "not-implemented" error.
type ServiceCreateNotImplementedResponseBody struct {
	// Information message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ServiceCreateAlreadyCreatedResponseBody is the type of the "service" service
// "service-create" endpoint HTTP response body for the "already-created" error.
type ServiceCreateAlreadyCreatedResponseBody struct {
	// ID of already existing resource
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ServiceCreateNotFoundResponseBody is the type of the "service" service
// "service-create" endpoint HTTP response body for the "not-found" error.
type ServiceCreateNotFoundResponseBody struct {
	// ID of missing resource
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ServiceReadBadRequestResponseBody is the type of the "service" service
// "service-read" endpoint HTTP response body for the "bad-request" error.
type ServiceReadBadRequestResponseBody struct {
	// Information message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ServiceReadInvalidScopesResponseBody is the type of the "service" service
// "service-read" endpoint HTTP response body for the "invalid-scopes" error.
type ServiceReadInvalidScopesResponseBody struct {
	// ID of involved resource
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ServiceReadNotImplementedResponseBody is the type of the "service" service
// "service-read" endpoint HTTP response body for the "not-implemented" error.
type ServiceReadNotImplementedResponseBody struct {
	// Information message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ServiceReadNotFoundResponseBody is the type of the "service" service
// "service-read" endpoint HTTP response body for the "not-found" error.
type ServiceReadNotFoundResponseBody struct {
	// ID of missing resource
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ServiceUpdateBadRequestResponseBody is the type of the "service" service
// "service-update" endpoint HTTP response body for the "bad-request" error.
type ServiceUpdateBadRequestResponseBody struct {
	// Information message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ServiceUpdateInvalidParameterResponseBody is the type of the "service"
// service "service-update" endpoint HTTP response body for the
// "invalid-parameter" error.
type ServiceUpdateInvalidParameterResponseBody struct {
	// message describing expected type or pattern.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// name of parameter.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// provided parameter value.
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// ServiceUpdateInvalidScopesResponseBody is the type of the "service" service
// "service-update" endpoint HTTP response body for the "invalid-scopes" error.
type ServiceUpdateInvalidScopesResponseBody struct {
	// ID of involved resource
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ServiceUpdateNotImplementedResponseBody is the type of the "service" service
// "service-update" endpoint HTTP response body for the "not-implemented" error.
type ServiceUpdateNotImplementedResponseBody struct {
	// Information message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ServiceUpdateNotFoundResponseBody is the type of the "service" service
// "service-update" endpoint HTTP response body for the "not-found" error.
type ServiceUpdateNotFoundResponseBody struct {
	// ID of missing resource
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ServiceDeleteBadRequestResponseBody is the type of the "service" service
// "service-delete" endpoint HTTP response body for the "bad-request" error.
type ServiceDeleteBadRequestResponseBody struct {
	// Information message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ServiceDeleteInvalidScopesResponseBody is the type of the "service" service
// "service-delete" endpoint HTTP response body for the "invalid-scopes" error.
type ServiceDeleteInvalidScopesResponseBody struct {
	// ID of involved resource
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ServiceDeleteNotImplementedResponseBody is the type of the "service" service
// "service-delete" endpoint HTTP response body for the "not-implemented" error.
type ServiceDeleteNotImplementedResponseBody struct {
	// Information message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// JobListBadRequestResponseBody is the type of the "service" service
// "job-list" endpoint HTTP response body for the "bad-request" error.
type JobListBadRequestResponseBody struct {
	// Information message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// JobListInvalidParameterResponseBody is the type of the "service" service
// "job-list" endpoint HTTP response body for the "invalid-parameter" error.
type JobListInvalidParameterResponseBody struct {
	// message describing expected type or pattern.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// name of parameter.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// provided parameter value.
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// JobListInvalidScopesResponseBody is the type of the "service" service
// "job-list" endpoint HTTP response body for the "invalid-scopes" error.
type JobListInvalidScopesResponseBody struct {
	// ID of involved resource
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// JobListNotImplementedResponseBody is the type of the "service" service
// "job-list" endpoint HTTP response body for the "not-implemented" error.
type JobListNotImplementedResponseBody struct {
	// Information message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// JobCreateBadRequestResponseBody is the type of the "service" service
// "job-create" endpoint HTTP response body for the "bad-request" error.
type JobCreateBadRequestResponseBody struct {
	// Information message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// JobCreateInvalidParameterResponseBody is the type of the "service" service
// "job-create" endpoint HTTP response body for the "invalid-parameter" error.
type JobCreateInvalidParameterResponseBody struct {
	// message describing expected type or pattern.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// name of parameter.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// provided parameter value.
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// JobCreateInvalidScopesResponseBody is the type of the "service" service
// "job-create" endpoint HTTP response body for the "invalid-scopes" error.
type JobCreateInvalidScopesResponseBody struct {
	// ID of involved resource
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// JobCreateNotReadyYetResponseBody is the type of the "service" service
// "job-create" endpoint HTTP response body for the "not-ready-yet" error.
type JobCreateNotReadyYetResponseBody struct {
	// the ID of the job
	JobID *string `form:"job-id,omitempty" json:"job-id,omitempty" xml:"job-id,omitempty"`
	// the URL for the job
	Location *string `form:"location,omitempty" json:"location,omitempty" xml:"location,omitempty"`
	// The time in seconds after which an update may be available
	RetryLater *int `form:"retry-later,omitempty" json:"retry-later,omitempty" xml:"retry-later,omitempty"`
}

// JobCreateNotImplementedResponseBody is the type of the "service" service
// "job-create" endpoint HTTP response body for the "not-implemented" error.
type JobCreateNotImplementedResponseBody struct {
	// Information message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// JobCreateNotFoundResponseBody is the type of the "service" service
// "job-create" endpoint HTTP response body for the "not-found" error.
type JobCreateNotFoundResponseBody struct {
	// ID of missing resource
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// JobReadBadRequestResponseBody is the type of the "service" service
// "job-read" endpoint HTTP response body for the "bad-request" error.
type JobReadBadRequestResponseBody struct {
	// Information message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// JobReadInvalidScopesResponseBody is the type of the "service" service
// "job-read" endpoint HTTP response body for the "invalid-scopes" error.
type JobReadInvalidScopesResponseBody struct {
	// ID of involved resource
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// JobReadNotImplementedResponseBody is the type of the "service" service
// "job-read" endpoint HTTP response body for the "not-implemented" error.
type JobReadNotImplementedResponseBody struct {
	// Information message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// JobReadNotFoundResponseBody is the type of the "service" service "job-read"
// endpoint HTTP response body for the "not-found" error.
type JobReadNotFoundResponseBody struct {
	// ID of missing resource
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// JobOutputBadRequestResponseBody is the type of the "service" service
// "job-output" endpoint HTTP response body for the "bad-request" error.
type JobOutputBadRequestResponseBody struct {
	// Information message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// JobOutputJobRequestErrorResponseBody is the type of the "service" service
// "job-output" endpoint HTTP response body for the "job-request-error" error.
type JobOutputJobRequestErrorResponseBody struct {
	// more infomration about the error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// JobOutputInvalidParameterResponseBody is the type of the "service" service
// "job-output" endpoint HTTP response body for the "invalid-parameter" error.
type JobOutputInvalidParameterResponseBody struct {
	// message describing expected type or pattern.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// name of parameter.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// provided parameter value.
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// JobOutputInvalidScopesResponseBody is the type of the "service" service
// "job-output" endpoint HTTP response body for the "invalid-scopes" error.
type JobOutputInvalidScopesResponseBody struct {
	// ID of involved resource
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// JobOutputJobInternalErrorResponseBody is the type of the "service" service
// "job-output" endpoint HTTP response body for the "job-internal-error" error.
type JobOutputJobInternalErrorResponseBody struct {
	// more infomration about the error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// JobOutputNotReadyYetResponseBody is the type of the "service" service
// "job-output" endpoint HTTP response body for the "not-ready-yet" error.
type JobOutputNotReadyYetResponseBody struct {
	// the ID of the job
	JobID *string `form:"job-id,omitempty" json:"job-id,omitempty" xml:"job-id,omitempty"`
	// The time in seconds after which an update may be available
	RetryLater *int `form:"retry-later,omitempty" json:"retry-later,omitempty" xml:"retry-later,omitempty"`
}

// JobOutputNotImplementedResponseBody is the type of the "service" service
// "job-output" endpoint HTTP response body for the "not-implemented" error.
type JobOutputNotImplementedResponseBody struct {
	// Information message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// JobOutputNotFoundResponseBody is the type of the "service" service
// "job-output" endpoint HTTP response body for the "not-found" error.
type JobOutputNotFoundResponseBody struct {
	// ID of missing resource
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// JobEventsEventTimeoutResponseBody is the type of the "service" service
// "job-events" endpoint HTTP response body for the "event-timeout" error.
type JobEventsEventTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// JobEventsBadRequestResponseBody is the type of the "service" service
// "job-events" endpoint HTTP response body for the "bad-request" error.
type JobEventsBadRequestResponseBody struct {
	// Information message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// JobEventsJobRequestErrorResponseBody is the type of the "service" service
// "job-events" endpoint HTTP response body for the "job-request-error" error.
type JobEventsJobRequestErrorResponseBody struct {
	// more infomration about the error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// JobEventsInvalidParameterResponseBody is the type of the "service" service
// "job-events" endpoint HTTP response body for the "invalid-parameter" error.
type JobEventsInvalidParameterResponseBody struct {
	// message describing expected type or pattern.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// name of parameter.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// provided parameter value.
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// JobEventsInvalidScopesResponseBody is the type of the "service" service
// "job-events" endpoint HTTP response body for the "invalid-scopes" error.
type JobEventsInvalidScopesResponseBody struct {
	// ID of involved resource
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// JobEventsJobInternalErrorResponseBody is the type of the "service" service
// "job-events" endpoint HTTP response body for the "job-internal-error" error.
type JobEventsJobInternalErrorResponseBody struct {
	// more infomration about the error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// JobEventsNotImplementedResponseBody is the type of the "service" service
// "job-events" endpoint HTTP response body for the "not-implemented" error.
type JobEventsNotImplementedResponseBody struct {
	// Information message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// JobEventsNotFoundResponseBody is the type of the "service" service
// "job-events" endpoint HTTP response body for the "not-found" error.
type JobEventsNotFoundResponseBody struct {
	// ID of missing resource
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ServiceListItemTResponseBody is used to define fields on response body types.
type ServiceListItemTResponseBody struct {
	// ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Optional customer provided name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Optional description of the service
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Optional tags defined for service to help in categorising them
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	// type of controller used for this service
	ControllerSchema *string `form:"controller-schema,omitempty" json:"controller-schema,omitempty" xml:"controller-schema,omitempty"`
	// time this service has been available from
	ValidFrom *string `form:"valid-from,omitempty" json:"valid-from,omitempty" xml:"valid-from,omitempty"`
	// time this service has been available to
	ValidTo *string `form:"valid-to,omitempty" json:"valid-to,omitempty" xml:"valid-to,omitempty"`
	Href    *string `json:"href,omitempty"`
}

// LinkTResponseBody is used to define fields on response body types.
type LinkTResponseBody struct {
	// relation type
	Rel *string `form:"rel,omitempty" json:"rel,omitempty" xml:"rel,omitempty"`
	// mime type
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// web link
	Href *string `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
}

// ParameterDefT is used to define fields on request body types.
type ParameterDefT struct {
	Name        string           `form:"name" json:"name" xml:"name"`
	Label       *string          `form:"label,omitempty" json:"label,omitempty" xml:"label,omitempty"`
	Type        string           `form:"type" json:"type" xml:"type"`
	Description string           `form:"description" json:"description" xml:"description"`
	Unit        *string          `form:"unit,omitempty" json:"unit,omitempty" xml:"unit,omitempty"`
	Constant    *bool            `form:"constant,omitempty" json:"constant,omitempty" xml:"constant,omitempty"`
	Optional    *bool            `form:"optional,omitempty" json:"optional,omitempty" xml:"optional,omitempty"`
	Default     *string          `form:"default,omitempty" json:"default,omitempty" xml:"default,omitempty"`
	Options     []*ParameterOptT `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	Unary       *bool            `form:"unary,omitempty" json:"unary,omitempty" xml:"unary,omitempty"`
}

// ParameterOptT is used to define fields on request body types.
type ParameterOptT struct {
	Value       *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// ParameterDefTResponseBody is used to define fields on response body types.
type ParameterDefTResponseBody struct {
	Name        *string                      `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Label       *string                      `form:"label,omitempty" json:"label,omitempty" xml:"label,omitempty"`
	Type        *string                      `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	Description *string                      `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	Unit        *string                      `form:"unit,omitempty" json:"unit,omitempty" xml:"unit,omitempty"`
	Constant    *bool                        `form:"constant,omitempty" json:"constant,omitempty" xml:"constant,omitempty"`
	Optional    *bool                        `form:"optional,omitempty" json:"optional,omitempty" xml:"optional,omitempty"`
	Default     *string                      `form:"default,omitempty" json:"default,omitempty" xml:"default,omitempty"`
	Options     []*ParameterOptTResponseBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	Unary       *bool                        `form:"unary,omitempty" json:"unary,omitempty" xml:"unary,omitempty"`
}

// ParameterOptTResponseBody is used to define fields on response body types.
type ParameterOptTResponseBody struct {
	Value       *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// JobListItemResponseBody is used to define fields on response body types.
type JobListItemResponseBody struct {
	// ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Optional customer provided name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Job status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// DateTime job processing started
	StartedAt *string `form:"started-at,omitempty" json:"started-at,omitempty" xml:"started-at,omitempty"`
	// DateTime job processing finished
	FinishedAt *string `form:"finished-at,omitempty" json:"finished-at,omitempty" xml:"finished-at,omitempty"`
	// Reference to service requested
	Service *string `form:"service,omitempty" json:"service,omitempty" xml:"service,omitempty"`
	// Reference to order
	Order *string `form:"order,omitempty" json:"order,omitempty" xml:"order,omitempty"`
	Href  *string `json:"href,omitempty"`
}

// PartialProductList2TResponseBody is used to define fields on response body
// types.
type PartialProductList2TResponseBody struct {
	// (Partial) list of products delivered by this order
	Items []*ProductListItem2TResponseBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// Links to more products, if there are any
	Links []*LinkTResponseBody `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
}

// ProductListItem2TResponseBody is used to define fields on response body
// types.
type ProductListItem2TResponseBody struct {
	ID       *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name     *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Status   *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	MimeType *string `json:"mime-type,omitempty"`
	Size     *int64  `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
	Href     *string `json:"href,omitempty"`
	DataHref *string `json:"dataRef,omitempty"`
}
